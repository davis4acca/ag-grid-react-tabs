{"version":3,"sources":["reducers/gridTypes.jsx","reducers/selectors.js","reducers/gridReducer.jsx","store.jsx","helpers/idGenerator.js","reducers/gridActions.jsx","components/AllViews.jsx","helpers/helpers.js","components/MyGrid.jsx","components/GridTab.jsx","App.jsx","components/GridTabs.jsx","components/GridPanelsList.jsx","index.jsx"],"names":["types","getCurrentViewAllGrids","state","allViews","currentViewInfo","index","allGrids","getCurrentViewTabIndex","currentViewIndex","currentView","tabIndex","getCurrentView","getViewById","id","viewIndex","findIndex","view","Error","getGridByViewAndGridId","viewId","gridId","gridIndex","grid","getGridById","foundGrid","i","length","j","addNewView","produce","draftState","newView","push","removeView","viewIndexToBeRemoved","getViewIndexById","splice","changeView","updatedCurrentViewInfo","addNewTab","gridConfig","changeTabName","newName","name","changeTabIndex","setCurrentViewInfoToNull","setGridData","newData","rowData","saveGridSortModel","sortModel","saveGridFilterModel","filterModel","saveGridColumnState","columnState","saveGridColumnGroupState","columnGroupState","saveGridPivotModeState","isPivotMode","saveStoreStateToLocalStorage","cache","forEach","cachedView","rowSelectionSyncStatus","cachedGrid","columnDefs","url","fetchAgain","cacheStringified","JSON","stringify","localStorage","setItem","restoreStoreStateToLocalStorage","parse","getItem","setGridFetchAgainToFalse","destroyTab","setRowSelectionSyncStatus","status","changeViewName","initialState","window","cacheParsed","createStore","action","payload","type","composeWithDevTools","applyMiddleware","thunk","logger","num","genId","Date","actions","createNewView","dispatch","getState","newViewId","createNewTab","isViewAvailable","nextTabIndex","store","currentViewId","setTabIndex","fetchGridData","destroyView","isCurrentView","isLastView","nextView","fetch","then","response","json","fetchGridDataSuccess","catch","err","fetchGridDataFail","changeTab","gridUrl","LicenseManager","setLicenseKey","AllViews","props","field","headerName","flex","editable","onCellValueChanged","params","data","newValue","valueGetter","viewName","cellRenderer","eGui","document","createElement","classList","add","innerHTML","value","querySelector","addEventListener","e","stopPropagation","activeElement","blur","prevProps","this","syncStatus","nodeToSelect","gridApi","getRowNode","isAlreadySelected","selected","undefined","setSelected","syncRowSelection","node","api","columnApi","map","className","overlayNoRowsTemplate","rowSelection","onGridReady","bind","onFirstDataRendered","onRowSelected","frameworkComponents","getRowNodeId","rowHeight","React","Component","connect","bindActionCreators","debounce","func","wait","immediate","timeout","context","args","arguments","later","apply","callNow","clearTimeout","setTimeout","MyGrid","defaultColDef","sortable","filter","resizable","enableValue","enablePivot","enableRowGroup","debounceSaveGridColumnState","debounceSaveGridColumnGroupState","debounceSaveGridPivotModeState","gridColumnApi","getFilterModel","getSortModel","isPivotModeDifferent","setColumnState","setColumnGroupState","setSortModel","setFilterModel","setPivotMode","getColumnState","getColumnGroupState","sideBar","onFilterChanged","onSortChanged","onColumnVisible","onSaveGridColumnState","onColumnPinned","onColumnResized","onColumnMoved","onColumnRowGroupChanged","onColumnValueChanged","onColumnPivotModeChanged","onSavePivotModeState","onNewColumnsLoaded","onGridColumnsChanged","onDisplayedColumnsChanged","onColumnEverythingChanged","GridTab","inputElRef","createRef","editing","gridName","setState","target","preventDefault","current","focus","select","key","tabName","inPutVisibility","spanVisibility","onDoubleClick","handleClick","onKeyPress","handleEnter","style","display","onChange","onNameChange","onBlur","ref","onClick","App","event","Fragment","selectedIndex","currentViewTabIndex","onSelect","allTabs","tagName","onAddNewTab","GridTabs","currentViewAllGrids","tabPanels","lastPanel","GridPanelsList","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.2c929367.chunk.js","sourcesContent":["export const types = {\n  // COMPOSITE ACTIONS\n  CREATE_NEW_VIEW: \"CREATE_NEW_VIEW\",\n  DESTROY_VIEW: \"DESTROY_VIEW\",\n\n  CREATE_NEW_TAB: \"CREATE_NEW_TAB\",\n  DESTROY_TAB: \"DESTROY_TAB\",\n\n  // ELEMENTARY ACTIONS\n  ADD_NEW_VIEW: \"ADD_NEW_VIEW\",\n  REMOVE_VIEW: \"REMOVE_VIEW\",\n  CHANGE_VIEW_NAME: \"CHANGE_VIEW_NAME\",\n\n  CHANGE_VIEW: \"CHANGE_VIEW\",\n  ADD_NEW_TAB: \"ADD_NEW_TAB\",\n  CHANGE_TAB_NAME: \"CHANGE_TAB_NAME\",\n\n  SET_TAB_INDEX: \"SET_TAB_INDEX\",\n  SET_CURRENT_VIEW_INFO_TO_NULL: \"SET_CURRENT_VIEW_INFO_TO_NULL\",\n  SET_GRID_DATA: \"SET_GRID_DATA\",\n  FETCH_GRID_DATA: \"FETCH_GRID_DATA\",\n\n  SAVE_GRID_SORT_MODEL: \"SAVE_GRID_SORT_MODEL\",\n  SAVE_GRID_FILTER_MODEL: \"SAVE_GRID_FILTER_MODEL\",\n\n  SAVE_GRID_COLUMN_STATE: \"SAVE_GRID_COLUMN_STATE\",\n  SAVE_GRID_COLUMN_GROUP_STATE: \"SAVE_GRID_COLUMN_GROUP_STATE\",\n  SAVE_GRID_PIVOT_MODE_STATE: \"SAVE_GRID_PIVOT_MODE_STATE\",\n\n  SAVE_STORE_STATE_TO_LOCAL_STORAGE: \"SAVE_STORE_STATE_TO_LOCAL_STORAGE\",\n  RESTORE_STORE_STATE_TO_LOCAL_STORAGE: \"RESTORE_STORE_STATE_TO_LOCAL_STORAGE\",\n\n  SET_GRID_FETCH_AGAIN_TO_FALSE: \"SET_GRID_FETCH_AGAIN_TO_FALSE\",\n  SET_ROW_SELECTION_SYNC_STATUS: \"SET_ROW_SELECTION_SYNC_STATUS\",\n};\n","export function getCurrentViewAllGrids(state) {\n  return state?.allViews[state?.currentViewInfo?.index]?.allGrids\n    ? state?.allViews[state?.currentViewInfo?.index].allGrids\n    : [];\n}\n\nexport function getCurrentViewTabIndex(state) {\n  let currentViewInfo = state.currentViewInfo;\n  let currentViewIndex = currentViewInfo?.index;\n  let currentView = state?.allViews[currentViewIndex];\n  let tabIndex = currentView?.tabIndex ? currentView.tabIndex : 0;\n\n  return tabIndex;\n}\n\nexport function getCurrentView(state) {\n  return state.currentViewInfo\n    ? state.allViews[state.currentViewInfo.index]\n    : null;\n}\n\nexport function getViewById(state, id) {\n  let viewIndex = state.allViews.findIndex((view) => {\n    return view.id === id;\n  });\n\n  let view = state.allViews[viewIndex];\n\n  if (view) {\n    return view;\n  }\n\n  throw new Error(\"VIEW NOT FOUND!!\");\n}\n\nexport function getViewIndexById(state, id) {\n  let viewIndex = state.allViews.findIndex((view) => {\n    return view.id === id;\n  });\n\n  if (viewIndex > -1) {\n    return viewIndex;\n  }\n\n  throw new Error(\"VIEW INDEX NOT FOUND!!\");\n}\n\nexport function getGridByViewAndGridId(state, viewId, gridId) {\n  let view = getViewById(state, viewId);\n\n  let gridIndex = view.allGrids.findIndex((grid) => {\n    return grid.id === gridId;\n  });\n\n  let grid = view.allGrids[gridIndex];\n\n  if (grid) {\n    return grid;\n  }\n\n  throw new Error(\"GRID NOT FOUND!!\");\n}\n\nexport function getGridById(state, gridId) {\n  let allViews = state.allViews;\n  let foundGrid;\n\n  for (let i = 0; i < allViews.length; i++) {\n    let allGrids = allViews[i].allGrids;\n\n    if (typeof grid === \"object\") break;\n\n    for (let j = 0; j < allGrids.length; j++) {\n      let grid = allGrids[j];\n\n      if (grid.id === gridId) {\n        foundGrid = grid;\n        break;\n      }\n    }\n  }\n\n  if (foundGrid) return foundGrid;\n\n  new Error(\" GRID NOT FOUND << < << \");\n}\n","import { types } from \"../reducers/gridTypes\";\n\nimport { produce } from \"immer\"; // https://www.youtube.com/watch?v=FmKjwh34Rn8\nimport {\n  getCurrentViewAllGrids,\n  getViewIndexById,\n  getGridByViewAndGridId,\n  getGridById,\n  getViewById,\n} from \"./selectors\";\n\nexport default function gridReducer(state = {}, action) {\n  const payload = action.payload;\n  switch (action.type) {\n    case types.ADD_NEW_VIEW:\n      return addNewView(state, payload);\n\n    case types.REMOVE_VIEW:\n      return removeView(state, payload);\n\n    case types.CHANGE_VIEW:\n      return changeView(state, payload);\n    case types.CHANGE_VIEW_NAME:\n      return changeViewName(state, payload);\n\n    case types.ADD_NEW_TAB:\n      return addNewTab(state, payload);\n\n    case types.CHANGE_TAB_NAME:\n      return changeTabName(state, payload);\n\n    case types.SET_TAB_INDEX:\n      return changeTabIndex(state, payload);\n\n    case types.SET_CURRENT_VIEW_INFO_TO_NULL:\n      return setCurrentViewInfoToNull(state, payload);\n\n    case types.SET_GRID_DATA:\n      return setGridData(state, payload);\n\n    case types.SAVE_GRID_SORT_MODEL:\n      return saveGridSortModel(state, payload);\n\n    case types.SAVE_GRID_FILTER_MODEL:\n      return saveGridFilterModel(state, payload);\n\n    case types.SAVE_GRID_COLUMN_STATE:\n      return saveGridColumnState(state, payload);\n\n    case types.SAVE_GRID_COLUMN_GROUP_STATE:\n      return saveGridColumnGroupState(state, payload);\n\n    case types.SAVE_GRID_PIVOT_MODE_STATE:\n      return saveGridPivotModeState(state, payload);\n\n    case types.SAVE_STORE_STATE_TO_LOCAL_STORAGE:\n      return saveStoreStateToLocalStorage(state);\n    case types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE:\n      return restoreStoreStateToLocalStorage(state);\n\n    case types.SET_GRID_FETCH_AGAIN_TO_FALSE:\n      return setGridFetchAgainToFalse(state, payload);\n    case types.DESTROY_TAB:\n      return destroyTab(state, payload);\n\n    case types.SET_ROW_SELECTION_SYNC_STATUS:\n      return setRowSelectionSyncStatus(state, payload);\n\n    default:\n      return state;\n  }\n}\n\nfunction addNewView(state, id) {\n  return produce(state, (draftState) => {\n    let newView = {\n      id: id,\n      allGrids: [],\n    };\n\n    draftState.allViews.push(newView);\n  });\n}\n\nfunction removeView(state, id) {\n  return produce(state, (draftState) => {\n    let viewIndexToBeRemoved = getViewIndexById(draftState, id);\n    draftState.allViews.splice(viewIndexToBeRemoved, 1);\n  });\n}\n\nfunction changeView(state, id) {\n  return produce(state, (draftState) => {\n    let index = draftState.allViews.findIndex((view) => {\n      return view.id === id;\n    });\n    let updatedCurrentViewInfo = { id, index };\n    draftState.currentViewInfo = updatedCurrentViewInfo;\n  });\n}\n\nfunction addNewTab(state, gridConfig) {\n  return produce(state, (draftState) => {\n    let currentViewAllGrids = getCurrentViewAllGrids(draftState);\n    currentViewAllGrids.push(gridConfig);\n  });\n}\n\nfunction changeTabName(state, { viewId, gridId, newName }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.name = newName;\n  });\n}\n\nfunction changeTabIndex(state, tabIndex) {\n  return produce(state, (draftState) => {\n    let currentView = draftState.allViews[draftState.currentViewInfo.index];\n    currentView.tabIndex = tabIndex;\n  });\n}\n\nfunction setCurrentViewInfoToNull(state) {\n  return produce(state, (draftState) => {\n    draftState.currentViewInfo = null;\n  });\n}\n\nfunction setGridData(state, { viewId, gridId, newData }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.rowData = newData;\n  });\n}\n\nfunction saveGridSortModel(state, { gridId, sortModel }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n\n    grid.sortModel = sortModel;\n  });\n}\n\nfunction saveGridFilterModel(state, { gridId, filterModel }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n\n    grid.filterModel = filterModel;\n  });\n}\n\nfunction saveGridColumnState(state, { gridId, columnState }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    if (grid) {\n      grid.columnState = columnState;\n    }\n  });\n}\n\nfunction saveGridColumnGroupState(state, { gridId, columnGroupState }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    if (grid) {\n      grid.columnGroupState = columnGroupState;\n    }\n  });\n}\n\nfunction saveGridPivotModeState(state, { gridId, isPivotMode }) {\n  return produce(state, (draftState) => {\n    let grid = getGridById(draftState, gridId);\n    grid.isPivotMode = isPivotMode;\n  });\n}\n\nfunction saveStoreStateToLocalStorage(state) {\n  let cache = {\n    currentViewInfo: state.currentViewInfo,\n    allViews: [],\n  };\n\n  state.allViews.forEach((view) => {\n    let cachedView = {\n      id: view.id,\n      tabIndex: view.tabIndex,\n      allGrids: [],\n      rowSelectionSyncStatus: view?.rowSelectionSyncStatus,\n      name: view.name,\n    };\n\n    view.allGrids.forEach(\n      ({\n        id,\n        columnDefs,\n        url,\n        sortModel,\n        filterModel,\n        columnState,\n        columnGroupState,\n        isPivotMode,\n        name,\n      }) => {\n        let cachedGrid = {\n          id,\n          columnDefs,\n          url,\n          sortModel,\n          filterModel,\n          columnState,\n          columnGroupState,\n          fetchAgain: true,\n          isPivotMode,\n          name,\n        };\n\n        cachedView.allGrids.push(cachedGrid);\n      }\n    );\n\n    cache.allViews.push(cachedView);\n  });\n\n  let cacheStringified = JSON.stringify(cache);\n\n  localStorage.setItem(\"cache\", cacheStringified);\n\n  return state;\n}\n\nfunction restoreStoreStateToLocalStorage(state) {\n  return JSON.parse(localStorage.getItem(\"cache\"));\n}\n\nfunction setGridFetchAgainToFalse(state, { viewId, gridId }) {\n  return produce(state, (draftState) => {\n    let grid = getGridByViewAndGridId(draftState, viewId, gridId);\n    grid.fetchAgain = false;\n  });\n}\n\nfunction destroyTab(state, tabIndex) {\n  return produce(state, (draftState) => {\n    let currentViewAllGrids = getCurrentViewAllGrids(draftState);\n\n    currentViewAllGrids.splice(tabIndex, 1);\n  });\n}\n\nfunction setRowSelectionSyncStatus(state, { viewId, status }) {\n  return produce(state, (draftState) => {\n    let view = getViewById(draftState, viewId);\n    view.rowSelectionSyncStatus = status;\n  });\n}\n\nfunction changeViewName(state, { viewId, newName }) {\n  return produce(state, (draftState) => {\n    let view = getViewById(draftState, viewId);\n    view.name = newName;\n  });\n}\n","import { applyMiddleware, createStore } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport gridReducer from \"./reducers/gridReducer\";\nimport logger from \"redux-logger\";\n\nimport thunk from \"redux-thunk\";\n\nlet initialState;\nlet cache = window.localStorage.getItem(\"cache\");\n\nif (cache) {\n  let cacheParsed = JSON.parse(cache);\n  initialState = { ...cacheParsed };\n} else {\n  initialState = {\n    currentViewInfo: null,\n    allViews: [],\n  };\n}\n\nexport default createStore(\n  gridReducer,\n  initialState,\n  composeWithDevTools(applyMiddleware(thunk, logger))\n);\n","let num = 0;\n\nexport default function genId() {\n  return new Date() + \"\" + num++;\n}\n","import { types } from \"./gridTypes\";\nimport store from \"../store\";\nimport genId from \"../helpers/idGenerator\";\nimport { getCurrentViewAllGrids } from \"./selectors\";\n\nexport const actions = {\n  // COMPLEX ACTIONS\n\n  createNewView() {\n    return (dispatch, getState) => {\n      var newViewId = genId();\n\n      dispatch(actions.addNewView(newViewId));\n      dispatch(actions.changeView(newViewId));\n    };\n  },\n\n  createNewTab(gridConfig) {\n    return (dispatch, getState) => {\n      let isViewAvailable = getState().currentViewInfo !== null;\n      // give the grid an id\n      gridConfig.id = genId();\n\n      // handle edge case, when no views are available\n      if (!isViewAvailable) {\n        let newViewId = genId();\n        dispatch(actions.createNewView(newViewId));\n      }\n      dispatch(actions.addNewTab(gridConfig));\n\n      let currentViewAllGrids = getCurrentViewAllGrids(store.getState());\n      let nextTabIndex = currentViewAllGrids.length - 1;\n      let currentViewId = store.getState().currentViewInfo.id;\n\n      dispatch(actions.setTabIndex(nextTabIndex));\n      dispatch(\n        actions.fetchGridData(currentViewId, gridConfig.id, gridConfig.url)\n      );\n    };\n  },\n\n  destroyView(viewId) {\n    return (dispatch, getState) => {\n      let currentViewId = getState().currentViewInfo.id;\n      let isCurrentView = currentViewId === viewId;\n      let isLastView = getState().allViews.length === 1;\n\n      dispatch(actions.removeView(viewId));\n\n      if (isLastView) {\n        dispatch(actions.setCurrentViewInfoToNull());\n        return;\n      }\n\n      if (isCurrentView && !isLastView) {\n        let allViews = getState().allViews;\n        let nextView = allViews[allViews.length - 1];\n        dispatch(actions.changeView(nextView.id));\n        return;\n      }\n\n      if (!isLastView && !isCurrentView) {\n        dispatch(actions.changeView(currentViewId));\n        return;\n      }\n    };\n  },\n\n  fetchGridData(viewId, gridId, url) {\n    return (dispatch) => {\n      fetch(url)\n        .then((response) => {\n          return response.json().then((rowData) => {\n            dispatch(actions.fetchGridDataSuccess(viewId, gridId, rowData));\n          });\n        })\n        .catch((err) => {\n          dispatch(actions.fetchGridDataFail(err));\n        });\n    };\n  },\n\n  fetchGridDataSuccess(viewId, gridId, rowData) {\n    return (dispatch) => {\n      dispatch(actions.setGridData(viewId, gridId, rowData));\n      dispatch(actions.setGridFetchAgainToFalse(viewId, gridId));\n    };\n  },\n\n  fetchGridDataFail(err) {\n    new Error(err, \" <<<< FETCH GRID DATA FAIL\");\n  },\n\n  changeTab(tabIndex) {\n    return (dispatch, getState) => {\n      let state = getState();\n      let currentViewIndex = state.currentViewInfo.index;\n      let currentView = state.allViews[currentViewIndex];\n      let viewId = state.currentViewInfo.id;\n      let grid = currentView.allGrids[tabIndex];\n      let gridId = grid.id;\n      let gridUrl = grid.url;\n      let fetchAgain = grid.fetchAgain;\n\n      dispatch(actions.setTabIndex(tabIndex));\n\n      if (fetchAgain) {\n        dispatch(actions.fetchGridData(viewId, gridId, gridUrl));\n      }\n    };\n  },\n\n  destroyTab(tabIndex) {\n    return {\n      type: types.DESTROY_TAB,\n      payload: tabIndex,\n    };\n  },\n\n  // SIMPLE ACTIONS\n  addNewView(id) {\n    return {\n      type: types.ADD_NEW_VIEW,\n      payload: id,\n    };\n  },\n\n  changeTabName(viewId, gridId, newName) {\n    return {\n      type: types.CHANGE_TAB_NAME,\n      payload: { viewId, gridId, newName },\n    };\n  },\n\n  removeView(id) {\n    return {\n      type: types.REMOVE_VIEW,\n      payload: id,\n    };\n  },\n\n  changeViewName(viewId, newName) {\n    return {\n      type: types.CHANGE_VIEW_NAME,\n      payload: { viewId, newName },\n    };\n  },\n\n  changeView(id) {\n    return {\n      type: types.CHANGE_VIEW,\n      payload: id,\n    };\n  },\n\n  addNewTab(gridConfig) {\n    return {\n      type: types.ADD_NEW_TAB,\n      payload: gridConfig,\n    };\n  },\n\n  setTabIndex(tabIndex) {\n    return {\n      type: types.SET_TAB_INDEX,\n      payload: tabIndex,\n    };\n  },\n\n  setCurrentViewInfoToNull() {\n    return {\n      type: types.SET_CURRENT_VIEW_INFO_TO_NULL,\n    };\n  },\n\n  setGridData(viewId, gridId, newData) {\n    return {\n      type: types.SET_GRID_DATA,\n      payload: { viewId, gridId, newData },\n    };\n  },\n\n  saveGridSortModel(gridId, sortModel) {\n    return {\n      type: types.SAVE_GRID_SORT_MODEL,\n      payload: { gridId, sortModel },\n    };\n  },\n  saveGridFilterModel(gridId, filterModel) {\n    return {\n      type: types.SAVE_GRID_FILTER_MODEL,\n      payload: { gridId, filterModel },\n    };\n  },\n\n  saveGridColumnState(gridId, columnState) {\n    return {\n      type: types.SAVE_GRID_COLUMN_STATE,\n      payload: { gridId, columnState },\n    };\n  },\n\n  saveGridColumnGroupState(gridId, columnGroupState) {\n    return {\n      type: types.SAVE_GRID_COLUMN_GROUP_STATE,\n      payload: { gridId, columnGroupState },\n    };\n  },\n\n  saveGridPivotModeState(gridId, isPivotMode) {\n    return {\n      type: types.SAVE_GRID_PIVOT_MODE_STATE,\n      payload: { gridId, isPivotMode },\n    };\n  },\n\n  // except for rowData\n  saveStoreStateToLocalStorage() {\n    return {\n      type: types.SAVE_STORE_STATE_TO_LOCAL_STORAGE,\n    };\n  },\n\n  restoreStoreStateToLocalStorage() {\n    return {\n      type: types.RESTORE_STORE_STATE_TO_LOCAL_STORAGE,\n    };\n  },\n\n  setGridFetchAgainToFalse(viewId, gridId) {\n    return {\n      type: types.SET_GRID_FETCH_AGAIN_TO_FALSE,\n      payload: { viewId, gridId },\n    };\n  },\n  setRowSelectionSyncStatus(viewId, status) {\n    return {\n      type: types.SET_ROW_SELECTION_SYNC_STATUS,\n      payload: { viewId, status },\n    };\n  },\n};\n","import React from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine.css\";\nimport \"ag-grid-enterprise\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"../reducers/gridActions\";\n\nimport { LicenseManager } from \"ag-grid-enterprise\";\nimport { getCurrentView } from \"../reducers/selectors\";\n\nLicenseManager.setLicenseKey(\n  \"[TRIAL]_16_May_2020_[v2]_MTU4OTU4NzIwMDAwMA==b03f1f5b63303eabbc3b42a734fcc666\"\n);\n\nclass AllViews extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.columnDefs = [\n      {\n        field: \"viewName\",\n        headerName: \"Name\",\n        flex: 1,\n        editable: true,\n        onCellValueChanged: (params) => {\n          this.props.actions.changeViewName(\n            params.data.viewId,\n            params.newValue\n          );\n        },\n        valueGetter: (params) =>\n          params.data.viewName ? params.data.viewName : \"New View\",\n\n        cellRenderer: (params) => {\n          let eGui = document.createElement(\"div\");\n          eGui.classList.add(\"view-nane-column-cell\");\n          eGui.innerHTML = ` <button class=\"view-name-column-cell-delete-btn\"> X </button> <span> ${params.value} </span>`;\n          eGui.querySelector(\"button\").addEventListener(\"click\", (e) => {\n            e.stopPropagation();\n            let viewId = params.data.viewId;\n            document.activeElement.blur(); // workaround for flush update warning\n            this.props.actions.destroyView(viewId);\n          });\n\n          return eGui;\n        },\n      },\n    ];\n  }\n\n  syncRowSelection(prevProps) {\n    // Only SYNC ROW SELECTION WHEN NOT CURRENTLY ALREADY SYNCING\n    let currentViewInfo = this.props.currentViewInfo;\n\n    let syncStatus = this.props.currentView?.rowSelectionSyncStatus;\n    let nodeToSelect = this.gridApi.getRowNode(currentViewInfo?.id);\n    let isAlreadySelected = nodeToSelect?.selected;\n\n    if (\n      syncStatus === \"SYNCING\" ||\n      isAlreadySelected ||\n      nodeToSelect === undefined ||\n      currentViewInfo === null\n    )\n      return;\n\n    this.props.actions.setRowSelectionSyncStatus(currentViewInfo.id, \"SYNCING\");\n\n    nodeToSelect.setSelected(true);\n\n    this.props.actions.setRowSelectionSyncStatus(\n      currentViewInfo.id,\n      \"SYNC_DONE\"\n    );\n  }\n\n  componentDidUpdate(prevProps) {\n    this.syncRowSelection(prevProps);\n  }\n\n  onFirstDataRendered(params) {\n    let nodeToSelect = this.gridApi.getRowNode(this.props?.currentView?.id);\n    if (nodeToSelect) nodeToSelect.setSelected(true);\n  }\n\n  onRowSelected(params) {\n    // when state is syncing do nothing\n    if (this.props.currentView?.rowSelectionSyncStatus === \"SYNCING\") return;\n\n    // isSelectedNode makes sure to only pick the currently selected grid node, this is because rowSelected gets also triggered for deSelection\n    let isSelectedNode = params.node.selected;\n    if (isSelectedNode) this.props.actions.changeView(params.node.id);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.columnApi = params.columnApi;\n  }\n\n  render() {\n    this.rowData = this.props.allViews.map((view) => {\n      return {\n        viewId: view.id,\n        viewName: view.name,\n      };\n    });\n\n    return (\n      <div className={`ag-theme-alpine  ${this.props.className}`}>\n        <AgGridReact\n          overlayNoRowsTemplate={\n            '<span style=\"padding: 10px; border: 2px solid #444; background: lightgoldenrodyellow;\"> There are no views available. Add a new view</span>'\n          }\n          rowSelection=\"single\"\n          rowData={this.rowData}\n          columnDefs={this.columnDefs}\n          onGridReady={this.onGridReady.bind(this)}\n          onFirstDataRendered={this.onFirstDataRendered.bind(this)}\n          onRowSelected={this.onRowSelected.bind(this)}\n          frameworkComponents={this.frameworkComponents}\n          getRowNodeId={(node) => node.viewId}\n          rowHeight={60}\n        ></AgGridReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  allViews: state.allViews,\n  currentViewInfo: state.currentViewInfo,\n  currentView: getCurrentView(state),\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AllViews);\n","// Credit David Walsh (https://davidwalsh.name/javascript-debounce-function)\n\n// Returns a function, that, as long as it continues to be invoked, will not\n// be triggered. The function will be called after it stops being called for\n// N milliseconds. If `immediate` is passed, trigger the function on the\n// leading edge, instead of the trailing.\nexport function debounce(func, wait, immediate) {\n  var timeout;\n\n  // This is the function that is actually executed when\n  // the DOM event is triggered.\n  return function executedFunction() {\n    // Store the context of this and any\n    // parameters passed to executedFunction\n    var context = this;\n    var args = arguments;\n\n    // The function to be called after\n    // the debounce time has elapsed\n    var later = function () {\n      // null timeout to indicate the debounce ended\n      timeout = null;\n\n      // Call function now if you did not on the leading end\n      if (!immediate) func.apply(context, args);\n    };\n\n    // Determine if you should call the function\n    // on the leading or trail end\n    var callNow = immediate && !timeout;\n\n    // This will reset the waiting every function execution.\n    // This is the step that prevents the function from\n    // being executed because it will never reach the\n    // inside of the previous setTimeout\n    clearTimeout(timeout);\n\n    // Restart the debounce waiting period.\n    // setTimeout returns a truthy value (it differs in web vs node)\n    timeout = setTimeout(later, wait);\n\n    // Call immediately if you're dong a leading\n    // end execution\n    if (callNow) func.apply(context, args);\n  };\n}\n","import React, { Component } from \"react\";\nimport { AgGridReact } from \"ag-grid-react\";\nimport { debounce } from \"../helpers/helpers\";\n\nimport \"ag-grid-community/dist/styles/ag-grid.css\";\nimport \"ag-grid-community/dist/styles/ag-theme-alpine-dark.css\";\nimport \"ag-grid-enterprise\";\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"../reducers/gridActions\";\n\nimport { LicenseManager } from \"ag-grid-enterprise\";\n\nLicenseManager.setLicenseKey(\n  \"[TRIAL]_16_May_2020_[v2]_MTU4OTU4NzIwMDAwMA==b03f1f5b63303eabbc3b42a734fcc666\"\n);\n\nclass MyGrid extends Component {\n  constructor(props) {\n    super(props);\n\n    this.defaultColDef = {\n      sortable: true,\n      filter: true,\n      resizable: true,\n      enableValue: true,\n      enablePivot: true,\n      enableRowGroup: true,\n    };\n\n    this.debounceSaveGridColumnState = debounce((id, columnState) => {\n      this.props.actions.saveGridColumnState(id, columnState);\n    }, 500);\n\n    this.debounceSaveGridColumnGroupState = debounce((id, columnGroupState) => {\n      this.props.actions.saveGridColumnGroupState(id, columnGroupState);\n    }, 500);\n\n    this.debounceSaveGridPivotModeState = debounce((id, isPivotMode) => {\n      this.props.actions.saveGridPivotModeState(id, isPivotMode);\n    }, 500);\n  }\n\n  onGridReady(params) {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    // When reloading the page and getting the state from local storage, fetch again the data for the currently displayed grid\n\n    let viewId = this.props.currentViewInfo.id;\n    let gridId = this.props.id;\n    let url = this.props.url;\n\n    if (this.props.fetchAgain) {\n      this.props.actions.fetchGridData(viewId, gridId, url);\n    }\n  }\n\n  onFilterChanged(params) {\n    let filterModel = params.api.getFilterModel();\n    this.props.actions.saveGridFilterModel(this.props.id, filterModel);\n  }\n\n  onSortChanged(params) {\n    let sortModel = params.api.getSortModel();\n    this.props.actions.saveGridSortModel(this.props.id, sortModel);\n  }\n\n  onFirstDataRendered(params) {\n    let sortModel = this.props?.sortModel;\n    let filterModel = this.props?.filterModel;\n    let columnState = this.props?.columnState;\n    let columnGroupState = this.props?.columnGroupState;\n    let isPivotMode = this.props?.isPivotMode; // boolean\n    let isPivotModeDifferent =\n      this.gridColumnApi?.isPivotMode() !== this?.props?.isPivotMode;\n\n    if (columnState) {\n      this.gridColumnApi.setColumnState(columnState);\n    }\n\n    if (columnGroupState) {\n      this.gridColumnApi.setColumnGroupState(columnGroupState);\n    }\n\n    if (sortModel) {\n      this.gridApi.setSortModel(sortModel);\n    }\n\n    if (filterModel) {\n      this.gridApi.setFilterModel(filterModel);\n    }\n    if (this?.props?.isPivotMode !== undefined && isPivotModeDifferent) {\n      this.gridColumnApi.setPivotMode(isPivotMode);\n    }\n  }\n\n  onSaveGridColumnState(e) {\n    if (!this.gridColumnApi) return;\n    let columnState = this.gridColumnApi?.getColumnState();\n    let columnGroupState = this.gridColumnApi?.getColumnGroupState();\n\n    this.debounceSaveGridColumnState(this.props.id, columnState);\n    this.debounceSaveGridColumnGroupState(this.props.id, columnGroupState);\n  }\n\n  onSavePivotModeState() {\n    let isPivotMode = this.gridColumnApi.isPivotMode();\n\n    let isPivotModeDifferentFromProps =\n      this.gridColumnApi.isPivotMode() !== this.props.isPivotMode;\n    if (isPivotModeDifferentFromProps)\n      this.debounceSaveGridPivotModeState(this.props.id, isPivotMode);\n  }\n\n  render() {\n    return (\n      <div className={`ag-theme-alpine-dark ${this.props.className}`}>\n        <AgGridReact\n          columnDefs={this.props.columnDefs}\n          rowData={this.props.rowData}\n          defaultColDef={this.defaultColDef}\n          sideBar={true}\n          //EVENTS\n\n          onFirstDataRendered={this.onFirstDataRendered.bind(this)}\n          onFilterChanged={this.onFilterChanged.bind(this)}\n          onGridReady={this.onGridReady.bind(this)}\n          // state change events\n          onSortChanged={this.onSortChanged.bind(this)}\n          onColumnVisible={this.onSaveGridColumnState.bind(this)}\n          onColumnPinned={this.onSaveGridColumnState.bind(this)}\n          onColumnResized={this.onSaveGridColumnState.bind(this)}\n          onColumnMoved={this.onSaveGridColumnState.bind(this)}\n          onColumnRowGroupChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnValueChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnPivotModeChanged={this.onSavePivotModeState.bind(this)}\n          // extra\n          onNewColumnsLoaded={this.onSaveGridColumnState.bind(this)}\n          onGridColumnsChanged={this.onSaveGridColumnState.bind(this)}\n          onDisplayedColumnsChanged={this.onSaveGridColumnState.bind(this)}\n          onColumnEverythingChanged={this.onSaveGridColumnState.bind(this)}\n        ></AgGridReact>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  currentViewInfo: state.currentViewInfo,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyGrid);\n","import React, { Component } from \"react\";\n\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"../reducers/gridActions\";\nimport { Fragment } from \"react\";\n\nclass GridTab extends Component {\n  constructor(props) {\n    super(props);\n\n    this.inputElRef = React.createRef();\n\n    this.state = {\n      editing: false,\n      gridName: props.gridName !== undefined ? props.gridName : \"New Tab\",\n    };\n  }\n\n  onNameChange(e) {\n    this.setState({\n      ...this.state,\n      gridName: e.target.value,\n    });\n  }\n\n  handleClick(e) {\n    e.stopPropagation();\n    e.preventDefault();\n    this.setState({ ...this.state, editing: true });\n\n    setTimeout(() => {\n      this.inputElRef.current.focus();\n      this.inputElRef.current.select();\n    }, 50);\n  }\n\n  onBlur() {\n    this.setState({ ...this.state, editing: false });\n\n    this.props.actions.changeTabName(\n      this.props.viewId,\n      this.props.gridId,\n      this.state.gridName\n    );\n  }\n\n  handleEnter(e) {\n    let isEnterPressed = e.key === \"Enter\";\n    if (isEnterPressed) {\n      this.setState({ ...this.state, editing: false });\n\n      this.props.actions.changeTabName(\n        this.props.viewId,\n        this.props.gridId,\n        this.state.gridName\n      );\n    }\n  }\n\n  render() {\n    let tabName = this.props.gridName ? this.props.gridName : \"New Tab\";\n    let inPutVisibility = this.state.editing ? \"inline-block\" : \"none\";\n    let spanVisibility = this.state.editing ? \"none\" : \"inline-block\";\n\n    return (\n      <Fragment>\n        <div onDoubleClick={this.handleClick.bind(this)}>\n          <input\n            onKeyPress={this.handleEnter.bind(this)}\n            style={{ display: inPutVisibility }}\n            value={this.state.gridName}\n            onChange={this.onNameChange.bind(this)}\n            onBlur={this.onBlur.bind(this)}\n            ref={this.inputElRef}\n          ></input>\n\n          <span style={{ display: spanVisibility }}>{tabName}</span>\n\n          <button\n            className={\"tab-btn\"}\n            onClick={(e) => {\n              e.stopPropagation();\n              this.props.actions.destroyTab(this.props.index);\n            }}\n          >\n            X\n          </button>\n        </div>\n      </Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GridTab);\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { TabList, Tabs } from \"react-tabs\";\nimport { connect } from \"react-redux\";\nimport \"react-tabs/style/react-tabs.css\";\nimport { bindActionCreators } from \"redux\";\nimport { actions } from \"./reducers/gridActions\";\n\nimport AllViews from \"./components/AllViews\";\nimport {\n  getCurrentViewTabIndex,\n  getCurrentViewAllGrids,\n  getCurrentView,\n} from \"./reducers/selectors\";\nimport GridPanelsList from \"./components/GridPanelsList\";\nimport GridTabs from \"./components/GridTabs\";\nclass App extends Component {\n  addNewTab(event) {\n    let url =\n      \"https://raw.githubusercontent.com/ag-grid/ag-grid/master/grid-packages/ag-grid-docs/src/olympicWinnersSmall.json\";\n    let columnDefs = [\n      { field: \"athlete\" },\n      { field: \"age\" },\n      { field: \"country\" },\n      { field: \"year\" },\n      { field: \"date\" },\n      { field: \"sport\" },\n      { field: \"gold\" },\n      { field: \"silver\" },\n      { field: \"bronze\" },\n      { field: \"total\" },\n    ];\n\n    let gridConfig = {\n      url: url,\n      columnDefs,\n    };\n\n    this.props.actions.createNewTab(gridConfig);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <button\n          className=\"action-button\"\n          onClick={this.props.actions.saveStoreStateToLocalStorage}\n        >\n          SAVE STORE TO LOCAL STORAGE\n        </button>\n\n        <button\n          className=\"action-button\"\n          onClick={this.props.actions.createNewView}\n        >\n          ADD NEW VIEW\n        </button>\n\n        <div className=\"flex-container\">\n          <AllViews className=\"all-views\"></AllViews>\n          <Tabs\n            className=\"tabs-container\"\n            selectedIndex={this.props.currentViewTabIndex}\n            onSelect={(index) => {\n              this.props.actions.changeTab(index);\n            }}\n          >\n            {/* Using a function instead of <Component> because of React Tabs issue: https://github.com/reactjs/react-tabs/issues/253#issuecomment-407282036  */}\n\n            <TabList>\n              {GridTabs({\n                allGrids: this.props.currentViewAllGrids,\n                currentView: this.props.currentView,\n                onAddNewTab: this.addNewTab.bind(this),\n              })}\n            </TabList>\n\n            {GridPanelsList({\n              allGrids: this.props.currentViewAllGrids,\n              className: \"grid-panel\",\n            })}\n          </Tabs>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => {\n  return {\n    allViews: state.allViews,\n    currentViewInfo: state.currentViewInfo,\n    currentViewAllGrids: getCurrentViewAllGrids(state),\n    currentViewTabIndex: getCurrentViewTabIndex(state),\n    currentView: getCurrentView(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  actions: bindActionCreators(actions, dispatch),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from \"react\";\n\nimport GridTab from \"./GridTab\";\nimport { Tab } from \"react-tabs\";\n\nexport default function GridTabs(props) {\n  let allTabs = props.allGrids.map((grid, index) => (\n    <Tab key={grid.id}>\n      <GridTab\n        viewId={props.currentView.id}\n        gridId={grid.id}\n        gridName={grid.name}\n        index={index}\n      ></GridTab>\n    </Tab>\n  ));\n\n  // Creates a tab for adding new tabs\n  allTabs.push(\n    <Tab\n      onClick={(e) => {\n        e.stopPropagation();\n        // only creates a new tab if the click is coming from the button not the tab\n        if (e.target.tagName === \"BUTTON\") props.onAddNewTab();\n      }}\n      key=\"last-tab\"\n    >\n      <button className={\"add-tab-btn\"}> + </button>\n    </Tab>\n  );\n\n  return allTabs;\n}\n","import { TabPanel } from \"react-tabs\";\nimport MyGrid from \"./MyGrid\";\nimport React from \"react\";\n\nexport default function GridPanelsList({ allGrids, className }) {\n  let tabPanels = allGrids.map((grid) => {\n    return (\n      <TabPanel key={grid.id}>\n        <MyGrid className={className} {...grid} />\n      </TabPanel>\n    );\n  });\n\n  // Tabs must match tabPanels therefore we need to create a panel for the (ADD TAB / TAB)\n  let lastPanel = <TabPanel key=\"last-tab-panel\"></TabPanel>;\n  tabPanels.push(lastPanel);\n\n  return tabPanels;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}